/**
 * PDF document generator service
 * Uses jsPDF and html2canvas to create PDFs from rendered HTML content
 */
import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';
import { DocumentOptions, createSafeFilename, PIRAMAL_COLORS } from './documentUtils';

/**
 * Generate a PDF document from the rendered HTML content
 * 
 * @param options DocumentOptions plus elementId to capture
 */
export const generatePdfFromElement = async (
  options: DocumentOptions & { elementId: string }
): Promise<void> => {
  const { title, companyName, elementId, includeTimestamp = true } = options;
  
  // Get the rendered HTML element
  const element = document.getElementById(elementId);
  if (!element) {
    throw new Error(`Element with ID "${elementId}" not found`);
  }
  
  try {
    // Configure PDF - ensure we're using the right options for browser environment
    const pdf = new jsPDF({
      orientation: 'portrait',
      unit: 'mm',
      format: 'a4',
      compress: true,
    });
    
    // Set document properties
    pdf.setProperties({
      title: title,
      subject: `Market Scan Report for ${companyName}`,
      author: 'Piramal Finance',
      creator: 'CMML Research Platform',
    });

    // Add logo and header (optional)
    const pageWidth = pdf.internal.pageSize.getWidth();
    const pageHeight = pdf.internal.pageSize.getHeight();
    
    // Add title
    pdf.setFont('helvetica', 'bold');
    pdf.setTextColor(PIRAMAL_COLORS.blue.replace('#', '')); // jsPDF expects color without #
    pdf.setFontSize(18);
    pdf.text(title, pageWidth / 2, 20, { align: 'center' });
    
    // Add subtitle
    pdf.setFontSize(14);
    pdf.text(`Market Scan Report: ${companyName}`, pageWidth / 2, 30, { align: 'center' });
    
    // Add timestamp if requested
    if (includeTimestamp) {
      pdf.setFont('helvetica', 'normal');
      pdf.setTextColor(PIRAMAL_COLORS.textSecondary.replace('#', ''));
      pdf.setFontSize(10);
      const timestamp = `Generated on ${new Date().toLocaleDateString()} at ${new Date().toLocaleTimeString()}`;
      pdf.text(timestamp, pageWidth / 2, 40, { align: 'center' });
    }
    
    // Capture the HTML content using html2canvas
    const canvas = await html2canvas(element, {
      scale: 2, // Higher scale for better quality
      useCORS: true, // Enable CORS for images
      logging: false,
      backgroundColor: '#FFFFFF', // White background
      windowWidth: element.scrollWidth,
      windowHeight: element.scrollHeight,
    });
    
    // Convert canvas to image
    const imgData = canvas.toDataURL('image/png');
    
    // Calculate dimensions to fit the page
    const imgWidth = pageWidth - 40; // 20mm margins on each side
    const imgHeight = (canvas.height * imgWidth) / canvas.width;
    
    // Add the content image
    pdf.addImage(imgData, 'PNG', 20, 50, imgWidth, imgHeight);
    
    // Add page numbers if content spans multiple pages
    const totalPages = Math.ceil((50 + imgHeight) / pageHeight);
    
    if (totalPages > 1) {
      // Content spans multiple pages, so we need to add the image to each page
      // and add page numbers
      
      for (let i = 1; i <= totalPages; i++) {
        if (i > 1) {
          pdf.addPage();
          
          // Calculate vertical position for this page
          const yPos = -pageHeight * (i - 1) + 50;
          
          // Add the image again, positioned to show the correct part
          pdf.addImage(imgData, 'PNG', 20, yPos, imgWidth, imgHeight);
        }
        
        // Add page number at the bottom
        pdf.setFont('helvetica', 'normal');
        pdf.setTextColor(PIRAMAL_COLORS.textSecondary.replace('#', ''));
        pdf.setFontSize(10);
        pdf.text(`Page ${i} of ${totalPages}`, pageWidth / 2, pageHeight - 10, { align: 'center' });
      }
    }
    
    // Add footer to the last page
    pdf.setFont('helvetica', 'italic');
    pdf.setTextColor(PIRAMAL_COLORS.textSecondary.replace('#', ''));
    pdf.setFontSize(9);
    pdf.text('Generated by CMML Research Platform - Piramal Finance', 
             pageWidth / 2, pageHeight - 5, { align: 'center' });
    
    // Generate filename and save
    const filename = createSafeFilename(companyName, 'pdf');
    pdf.save(filename);
    
  } catch (error) {
    console.error('Error generating PDF:', error);
    throw error;
  }
};

/**
 * Alternative method to generate PDF directly from markdown content
 * This approach might be useful if html2canvas doesn't work well or if
 * we want more control over the PDF layout
 */
export const generatePdfFromMarkdown = async (options: DocumentOptions): Promise<void> => {
  const { title, companyName, content, includeTimestamp = true } = options;
  
  try {
    // Configure PDF
    const pdf = new jsPDF({
      orientation: 'portrait',
      unit: 'mm',
      format: 'a4',
    });
    
    // Set document properties
    pdf.setProperties({
      title: title,
      subject: `Market Scan Report for ${companyName}`,
      author: 'Piramal Finance',
      creator: 'CMML Research Platform',
    });
    
    // Get page dimensions
    const pageWidth = pdf.internal.pageSize.getWidth();
    const pageHeight = pdf.internal.pageSize.getHeight();
    
    // Set margins
    const margin = 20; // 20mm margin
    const contentWidth = pageWidth - (margin * 2);
    
    // Add title
    pdf.setFont('helvetica', 'bold');
    pdf.setTextColor(PIRAMAL_COLORS.blue.replace('#', ''));
    pdf.setFontSize(18);
    pdf.text(title, pageWidth / 2, margin, { align: 'center' });
    
    // Add subtitle
    pdf.setFontSize(14);
    pdf.text(`Market Scan Report: ${companyName}`, pageWidth / 2, margin + 10, { align: 'center' });
    
    // Add timestamp if requested
    let yPosition = margin + 20;
    if (includeTimestamp) {
      pdf.setFont('helvetica', 'normal');
      pdf.setTextColor(PIRAMAL_COLORS.textSecondary.replace('#', ''));
      pdf.setFontSize(10);
      const timestamp = `Generated on ${new Date().toLocaleDateString()} at ${new Date().toLocaleTimeString()}`;
      pdf.text(timestamp, pageWidth / 2, yPosition, { align: 'center' });
      yPosition += 10;
    }
    
    // Add horizontal separator
    pdf.setDrawColor(PIRAMAL_COLORS.blueLight.replace('#', ''));
    pdf.line(margin, yPosition, pageWidth - margin, yPosition);
    yPosition += 10;
    
    // Reset text color for content
    pdf.setTextColor(PIRAMAL_COLORS.textPrimary.replace('#', ''));
    pdf.setFontSize(12);
    pdf.setFont('helvetica', 'normal');
    
    // Split markdown into lines and parse them
    const lines = content.split('\n');
    
    for (const line of lines) {
      // Parse markdown line
      if (line.startsWith('# ')) {
        // Heading 1
        pdf.setFont('helvetica', 'bold');
        pdf.setFontSize(16);
        pdf.setTextColor(PIRAMAL_COLORS.blue.replace('#', ''));
        
        // Check if we need a new page
        if (yPosition > pageHeight - margin) {
          pdf.addPage();
          yPosition = margin;
        }
        
        pdf.text(line.substring(2), margin, yPosition);
        yPosition += 10;
        
        // Reset
        pdf.setFont('helvetica', 'normal');
        pdf.setFontSize(12);
        pdf.setTextColor(PIRAMAL_COLORS.textPrimary.replace('#', ''));
      } 
      else if (line.startsWith('## ')) {
        // Heading 2
        pdf.setFont('helvetica', 'bold');
        pdf.setFontSize(14);
        pdf.setTextColor(PIRAMAL_COLORS.blueLight.replace('#', ''));
        
        // Check if we need a new page
        if (yPosition > pageHeight - margin) {
          pdf.addPage();
          yPosition = margin;
        }
        
        pdf.text(line.substring(3), margin, yPosition);
        yPosition += 8;
        
        // Reset
        pdf.setFont('helvetica', 'normal');
        pdf.setFontSize(12);
        pdf.setTextColor(PIRAMAL_COLORS.textPrimary.replace('#', ''));
      } 
      else if (line.trim() === '---') {
        // Horizontal rule
        // Check if we need a new page
        if (yPosition > pageHeight - margin) {
          pdf.addPage();
          yPosition = margin;
        }
        
        pdf.setDrawColor(PIRAMAL_COLORS.blueLight.replace('#', ''));
        pdf.line(margin, yPosition, pageWidth - margin, yPosition);
        yPosition += 5;
      } 
      else if (line.trim() !== '') {
        // Regular paragraph text
        // Check if we need a new page
        if (yPosition > pageHeight - margin) {
          pdf.addPage();
          yPosition = margin;
        }
        
        // Handle bold and italic (simplified)
        let text = line;
        let isBold = false;
        let isItalic = false;
        
        // Convert bold markdown (**text**)
        if (text.includes('**')) {
          isBold = true;
          text = text.replace(/\*\*/g, '');
        }
        
        // Convert italic markdown (*text*)
        if (text.includes('*')) {
          isItalic = true;
          text = text.replace(/\*/g, '');
        }
        
        // Set font style
        if (isBold && isItalic) {
          pdf.setFont('helvetica', 'bolditalic');
        } else if (isBold) {
          pdf.setFont('helvetica', 'bold');
        } else if (isItalic) {
          pdf.setFont('helvetica', 'italic');
        } else {
          pdf.setFont('helvetica', 'normal');
        }
        
        // Add text with word wrap
        const textLines = pdf.splitTextToSize(text, contentWidth);
        pdf.text(textLines, margin, yPosition);
        yPosition += textLines.length * 7; // Approximate line height
        
        // Reset font
        pdf.setFont('helvetica', 'normal');
      } 
      else {
        // Empty line - add space
        yPosition += 5;
      }
    }
    
    // Add footer to all pages
    const totalPages = pdf.getNumberOfPages();
    for (let i = 1; i <= totalPages; i++) {
      pdf.setPage(i);
      
      // Add page number
      pdf.setFont('helvetica', 'normal');
      pdf.setTextColor(PIRAMAL_COLORS.textSecondary.replace('#', ''));
      pdf.setFontSize(10);
      pdf.text(`Page ${i} of ${totalPages}`, pageWidth / 2, pageHeight - 10, { align: 'center' });
      
      // Add footer to the last page
      if (i === totalPages) {
        pdf.setFont('helvetica', 'italic');
        pdf.setFontSize(9);
        pdf.text('Generated by CMML Research Platform - Piramal Finance', 
                pageWidth / 2, pageHeight - 5, { align: 'center' });
      }
    }
    
    // Generate filename and save
    const filename = createSafeFilename(companyName, 'pdf');
    pdf.save(filename);
    
  } catch (error) {
    console.error('Error generating PDF from markdown:', error);
    throw error;
  }
};

export default {
  generatePdfFromElement,
  generatePdfFromMarkdown,
};
